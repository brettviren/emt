emt - Environment Management Tool

* What is here

This currently holds ideas for a tool that will assist in managing the environment typical for software used in HEP where much is built from source with many versions of a particular package around and where one wants to build and run ones own copy of   some software that is also available as part of a larger installed base release.

** Stand on the noses of giants

- Take ideas from Environment Modules (EM) and Code Management Tools (CMT) (EM+CMT=EMT).

- Instead of TCL configuration files like EM =modulefiles= use declaritive Python =ConfigParser= syntax with =str.format()= like expansion / string interpolation and later interpretation in Python

Note: EMT works with Python2 or Python3

* EMT uses

At its core, EMT is a language for describing aspects of installed software packages.  These aspects include installation locations, inter-dependencies, run time user environment settings and descriptors such as a name and a version.  The description is parsed and interpreted into some output or process.  Some interpretations include: modifying the caller's environment,  listing available packages or generating directed, acyclic graphs of dependencies.

* EMT file conventions 

EMT configuration files are named with =.emt= extension by convention but it's not required.

A package is described in a section of an EMT file with a globally unique name.

Any given EMT file may have multiple sections to describe more than one package.

A package section does not necessarily mean the package is to be applied by an interpreter.

Some special sections are named by reserved words (such as =includes=).

EMT files are located through the following conventions applied in order:

1) the file =~/.emt=
2) the file =./config.emt=
3) include directives 
4) file discovery 

Include directives and file discovery rely on a directory list called the EMT path.

Include directives are listed in EMT files and simply name other files to include.  Included files are absolute or relative paths.  If relative they are resolved w.r.t. the file that includes them and baring that their locations are resolved through iterating the EMT path.

File discovery works by walking the EMT path to find EMT files.  For each directory in that path, files ending in =.emt= are collected.  File inclusion is honored at this time.  

Both inclusion and discovery retain file order.

* EMT file loading

An EMT configuration is produced in the following ordered steps

- file collection :: follows above conventions and files are kept in the order found
- file parsing :: files are effectively concatenated and all [package] sections are parsed and remain in order
- interpolation :: any variables are interpolated
- interpretation :: the configuration is used to do something

* EMT configuration language

** Syntax

The EMT configuration syntax is that of Python's =ConfigParser= aka INI format.  It consists of a number of named sections each containing a number of key/value pairs, aka parameters aka configuration items.  Initial parsing treats all keys and values as literal strings.  Valid syntax allows any section names to be used.  Any unrecognized sections will be ignored.  Recognized sections include:

- DEFAULT :: specify default configuration items that apply to all other configuration sections but may be overridden by items set in the section.  
- includes :: a special section to indicate other configuration files to load
- "ID" :: any section not matching a reserved word above is assumed to be a package identifier

** Interpolation

Values undergo string interpolation.  This allows them to be composed from information specified elsewhere.  String interpolation is applied by interpreting the value inside of braces '={}=' as a key that is defined elsewhere in the same section (or in =DEFAULT=).  Optionally a key may be composed of the name of a section and a key from that section separated by a colon ("=:=").

#+INCLUDE: "./tests/configs/simple.emt" src config


** Data Structure

After interpolation the data structure containing the configuration is an ordered dictionary keyed by section names.  Each value is another ordered dictionary holding the configuration items from that section (or defined in the =DEFAULT= section).

** Interpretation

The EMT configuration is finally interpreted to produce some result.  The interpretation will take the post-interpolation configuration and apply some semantic meaning to the package configuration items.  Depending on what interpretation is made different keys may be used.  Some keys of importance are:

- require :: assert a package requires some other packages as specified by constraints
- envvar_X :: the environment variable =X= should be set or modified as specified by the value
- source :: the file identified by the value should be sourced 

*** Require

One package can require zero or more other packages to be available by specifying a =require= configuration item.  The value of this item is one or more lines of Python logical expressions involving the configuration items of other package sections.  Each line is logically OR'ed.  Note, each element of a =require= must start at least one space from the start of a line to distinguish it from being a separate configuration item.  See the example below.

#+INCLUDE: "./tests/configs/reqs.emt" src config

